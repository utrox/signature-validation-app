"""
Django settings for signature_validation_app project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import mimetypes
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('APP_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
IS_PRODUCTION = os.environ.get('APP_ENV', 'development') == 'production'
DEBUG = os.environ.get('APP_DEBUG', 'False' if IS_PRODUCTION else 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('APP_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'simple_history',
    'documents',
    'signatures',
    'signature_workflows.apps.SignatureWorkflowAppConfig',
    'form_builder.apps.FormBuilderAppConfig',
    'users',
    'authentication'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.exceptions.exception_handler.CustomExceptionHandlerMiddleware', #TODO: revisit exception handling for REST API endpoints
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "document_templates",
            BASE_DIR / "documents/tests/data"
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
import environ

env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

REACT_APP_BUILD_PATH= BASE_DIR / "client"
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'form_builder', 'static'), REACT_APP_BUILD_PATH]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Set custom user model
AUTH_USER_MODEL = 'users.User'


# Because in a development environment the frontend and backend are served on different ports,
# we need to set the CSRF_COOKIE_SAMESITE to 'Lax' in order to allow the frontend to send
# cookies to the backend. In production, the frontend and backend are served on the same domain,
# so we can set the CSRF_COOKIE_SAMESITE to 'Strict'.
# Also, if you're accessing the frontend on localhost, make sure that the link in .env.development
# is set to http://localhost:8000. Otherwise, if it's set to http://127.0.0.1:8000, you're going to spend 
# hours debugging why the CSRF cookie is not being sent to the backend when you have everything set up correctly,
# and you'll think about switching careers to be a tram driver instead.
CSRF_COOKIE_SAMESITE = 'Strict' if IS_PRODUCTION else 'Lax'
CSRF_TRUSTED_ORIGINS = os.environ.get('APP_CSRF_TRUSTED_ORIGINS', 'http://localhost:5173,http://localhost:8000').split(',')

CORS_ALLOWED_ORIGINS = os.environ.get('APP_CORS_ALLOWED_ORIGINS', 'http://localhost:5173,http://localhost:8000').split(',')
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'content-type',
    'x-csrftoken',
    'csrftoken',
    'authorization',
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
    "OPTIONS",  # Make sure OPTIONS is allowed for preflight
]


# Add mimetypes for css and js files, otherwise in production the following
# error will be raised by the browser:
# Failed to load module script: Expected a JavaScript module script but the server
# responded with a MIME type of "text/html".
# Strict MIME type checking is enforced for module scripts per HTML spec.
mimetypes.add_type("text/css", ".css", True)
mimetypes.add_type("text/javascript", ".js", True)


# How many signatures do users need to submit after registration.
REGISTRATION_SIGNATURES_COUNT = 10

SIGNATURE_SIMILARITY_THRESHOLD = 0.85
MAX_REJECTED_SIGNATURES = 5


# Unfold admin settings:
UNFOLD = {
    "SITE_TITLE": "D.A.M.N. Admin",
    "SITE_HEADER": "D.A.M.N. Admin",
    "SHOW_VIEW_ON_SITE": False,
    "SIDEBAR": {
        "navigation": [
            {
                "title": "Navigation", 
                "items": [
                    {
                        "title": "Dashboard",
                        "link": reverse_lazy("admin:index"),
                        "icon": "dashboard",
                    },
                    {
                        "title": "Documents",
                        "link": reverse_lazy("admin:documents_document_changelist"),
                        "icon": "file_copy",
                    },
                    {
                        "title": "Document forms",
                        "link": reverse_lazy("admin:form_builder_documentform_changelist"),
                        "icon": "dynamic_form",
                    },
                    {
                        "title": "Signature Workflows",
                        "link": reverse_lazy("admin:signature_workflows_signatureworkflow_changelist"),
                        "icon": "edit_document",
                    },
                    
                ]
            },
            {
                "title": "Authentication",
                "items": [
                    {
                        "title": "Authentication groups",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                        "icon": "group",
                    },
                    {
                        "title": "Users",
                        "link": reverse_lazy("admin:users_user_changelist"),
                        "icon": "person",
                    },
                    {
                        "title": "User profiles",
                        "link": reverse_lazy("admin:users_userprofile_changelist"),
                        "icon": "account_box",
                    },
            ]}
        ]
    }
}
